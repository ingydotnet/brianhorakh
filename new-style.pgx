##
## https://github.com/zoovy/AnyCommerce-Development/blob/201402/resources/pegjs-grammar-20140203.pegjs
## A simple grammar for the data-tlc language.
## For parser implementation that use this grammar, see ./parse.pl perl code.

## If you want to read this syntax and understand what's going on below, read this tutorial first:
## http://search.cpan.org/~ingy/Pegex-0.21/lib/Pegex/Tutorial/JSON.pod
## https://github.com/ingydotnet/pegex-pm/blob/master/examples/calculator1.pl

%grammar data-tlc
%version 1.0

## ** DATA-TLC**
## data-tlc is either 'if-statement', 'bind-statement' or 'command', separated by semi-solons (;)
## the last semi-colon is optional (in Pegex %% defines that optional alternation)
data-tlc: data-tlc-list+ %% lb* -
data-tlc-list: (
  | jscomment
  | if-statement
  | while-statement
  | foreach-statement
  | set-statement
  | bind-statement
  | command
)

## ** BIND-STATEMENT **
## bind $var 'something';    (jsonpath lookup)
## bind $var $someothervar;  (jsonpath lookup)
## bind $var ~tag;           (returns tag id/path)
## bind ~tag '#tagid';       jQuery('#tagid')
## bind ~tag $tagid;          jQuery($tagid)
bind-statement:
  /- 'bind' /
  (
  | variable
  | tag
  ) +
  (
  | variable
  | scalar
  | tag
  )
## set $var 'something'
## set $var $copy;
set-statement:
  /- 'set' /
  (variable | tag)
  (
  | variable
  | scalar
  | tag
  | integer
  | boolean
  | hexcolor
  | tag
  )
  value* % -

## ** IF/WHILE-STATEMENT **
## if(cond) {{ command1 }} else {{ command2 }}
## while(cond) {{ command1 }}
## block: /{{~/ (block | set-statement | bind-statement | command)+ %% /~<SEMI>~/ /~}}/
## block: /{{~/ <lb>* (data-tlc)+ %% /~<SEMI>~/ <lb>* /~}}/
## foreach $item in $items {{ command1; }}
cmdline: cmdline-list+ %% /- ';' /
cmdline-list: (
  | set-statement
  | bind-statement
  | if-statement
  | foreach-statement
  | while-statement
  | command
)

block:
  /- '{{' /
  (
  | jscomment
  | cmdline
  )+
  /- '}}' /

while-statement:
  /- 'while' - '(' /
  command
  /- ')'/
  block

if-statement:
  /- 'if' - '(' /
  command
  /- ')' /
  block
  (
    /- 'else' /
    block
  )?

foreach-statement:
  /- 'foreach' /
  variable
  /- 'in' /
  variable
  -
  block

## ** COMMAND **
## module_name#command_name --opts=...
command: /-
  (: ( WORD+) '#')?
  ( WORD+)
/ value* % -

## ** DATA TYPES **
value:
  | longopt
  | variable
  | integer
  | scalar
  | boolean
  | tag
  | hexcolor

longopt:
  | /- '--' ( ALPHA [ ALNUMS DASH ]+ ) '=' / value
  | /- '--' ( ALPHA [ ALNUMS DASH ]+ ) /

variable: /- '$' ( [ ALPHAS UNDER ] WORD* ) /

integer: /- ( DASH? DIGIT+ ) /

scalar: /- SINGLE (
    (:
      BACK SINGLE |
      [^ SINGLE]
    )*
  )
  SINGLE
/

boolean: /- (
  'true' |
  'false'
) /

## ~tag is a reference to a jquery object
## tag table should maintain reference to tags on DOM
tag: /- '~' ([ WORDS DASH ]+) /

hexcolor: /- '#' ( HEX{6}) /
## ** END DATA TYPES **

jscomment: /- '/*' ANY*? '*/' /
lb: /- ( ';' | EOL ) /
